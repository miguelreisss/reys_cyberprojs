import requests
from bs4 import BeautifulSoup
from urllib.parse import urljoin

# Function to check for SQL Injection vulnerabilities
def check_sql_injection(url):
    sqli_test_url = f"{url}?id=1' OR '1'='1"
    response = requests.get(sqli_test_url)
    if "syntax error" in response.text.lower() or "sql" in response.text.lower():
        print("Possible SQL Injection vulnerability detected!")
    else:
        print("No SQL Injection vulnerability detected.")

# Function to check for XSS vulnerabilities
def check_xss(url):
    xss_payload = "<script>alert('XSS')</script>"
    xss_test_url = f"{url}?q={xss_payload}"
    response = requests.get(xss_test_url)
    if xss_payload in response.text:
        print("Possible Cross-Site Scripting (XSS) vulnerability detected!")
    else:
        print("No XSS vulnerability detected.")

# Function to check for security headers
def check_security_headers(url):
    response = requests.head(url)
    headers = response.headers

    security_headers = [
        "Content-Security-Policy",
        "X-Content-Type-Options",
        "X-Frame-Options",
        "Strict-Transport-Security",
        "X-XSS-Protection"
    ]

    print("Checking for security headers...")
    for header in security_headers:
        if header in headers:
            print(f"{header}: Present")
        else:
            print(f"{header}: Missing")

# Function to check for directory traversal vulnerabilities
def check_directory_traversal(url):
    traversal_payload = "../../etc/passwd"
    traversal_test_url = urljoin(url, traversal_payload)
    response = requests.get(traversal_test_url)
    if "root:x:0:0:" in response.text:
        print("Possible Directory Traversal vulnerability detected!")
    else:
        print("No Directory Traversal vulnerability detected.")

# Function to discover and test forms for XSS
def check_forms_for_xss(url):
    response = requests.get(url)
    soup = BeautifulSoup(response.text, 'html.parser')
    forms = soup.find_all("form")

    print(f"Found {len(forms)} form(s) on {url}. Checking for XSS vulnerabilities...")

    for form in forms:
        action = form.get("action")
        method = form.get("method", "get").lower()
        form_url = urljoin(url, action)

        form_data = {}
        inputs = form.find_all("input")
        for input in inputs:
            input_name = input.get("name")
            if input_name:
                form_data[input_name] = "<script>alert('XSS')</script>"

        if method == "post":
            form_response = requests.post(form_url, data=form_data)
        else:
            form_response = requests.get(form_url, params=form_data)

        if "<script>alert('XSS')</script>" in form_response.text:
            print(f"Possible XSS vulnerability detected in form action: {action}")
        else:
            print(f"No XSS vulnerability detected in form action: {action}")

if __name__ == "__main__":
    target_url = input("Enter the target URL to scan: ")

    # Perform vulnerability checks
    check_sql_injection(target_url)
    check_xss(target_url)
    check_security_headers(target_url)
    check_directory_traversal(target_url)
    check_forms_for_xss(target_url)
    